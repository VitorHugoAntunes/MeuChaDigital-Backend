// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  googleId      String         @unique
  name          String
  email         String         @unique
  photo         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  list          GiftList[]
  contributions Contribution[]
}

model GiftList {
  id          String         @id @default(uuid()) @db.Uuid
  name        String
  description String?
  banner      String?
  userId      String         @db.Uuid
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  status      GiftListStatus
  gifts       Gift[]
}

enum GiftListStatus {
  ACTIVE
  INACTIVE
}

model Gift {
  id            String         @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  totalValue    Float
  photo         String
  giftShares    Int
  valuePerShare Float
  giftListId    String         @db.Uuid
  list          GiftList       @relation(fields: [giftListId], references: [id], onDelete: Cascade)
  contributions Contribution[]
  categoryId    String         @db.Uuid
  category      Category       @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gifts       Gift[]
}

model Contribution {
  id        String   @id @default(uuid()) @db.Uuid
  value     Float
  giftId    String   @db.Uuid
  userId    String   @db.Uuid
  gift      Gift     @relation(fields: [giftId], references: [id], onDelete: SetNull)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payment   Payment?
}

model Payment {
  id             String        @id @default(uuid()) @db.Uuid
  status         PaymentStatus
  paymentMethod  String
  qrCodePix      String?
  paymentDate    DateTime?
  contributionId String        @unique @db.Uuid // Alterado para @db.Uuid
  contribution   Contribution  @relation(fields: [contributionId], references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
}
