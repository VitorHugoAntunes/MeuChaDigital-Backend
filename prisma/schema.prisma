// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  googleId      String?        @unique
  name          String?
  email         String?        @unique
  photoId       String?        @db.Uuid
  photo         Image?         @relation(fields: [photoId], references: [id])
  isGuest       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  list          GiftList[]
  contributions Contribution[]
  charges       Charge[] // Cobrancas geradas para este usu√°rio pagar
}

model GiftList {
  id            String         @id @default(uuid()) @db.Uuid
  name          String
  slug          String         @unique
  type          GiftListType
  description   String?
  bannerId      String?        @unique @db.Uuid
  banner        Image?         @relation(name: "BannerImage", fields: [bannerId], references: [id])
  momentsImages Image[]        @relation(name: "MomentsImages")
  userId        String         @db.Uuid
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  shareableLink String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  status        GiftListStatus
  gifts         Gift[]

  Invitee Invitee[]
}

enum GiftListType {
  BIRTHDAY
  WEDDING
  BABY_SHOWER
}

model Image {
  id        String   @id @default(uuid()) @db.Uuid
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User[]
  gift Gift[]

  giftListId        String?   @db.Uuid
  bannerForGiftList GiftList? @relation(name: "BannerImage")
  giftList          GiftList? @relation(name: "MomentsImages", fields: [giftListId], references: [id])
}

enum GiftListStatus {
  ACTIVE
  INACTIVE
}

model Gift {
  id            String         @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  totalValue    Float
  priority      GiftPriority
  photoId       String?        @db.Uuid
  photo         Image?         @relation(fields: [photoId], references: [id])
  giftListId    String         @db.Uuid
  list          GiftList       @relation(fields: [giftListId], references: [id], onDelete: Cascade)
  contributions Contribution[]
  categoryId    String         @db.Uuid
  category      Category       @relation(fields: [categoryId], references: [id])
  charges       Charge[]
}

enum GiftPriority {
  LOW
  MEDIUM
  HIGH
}

model Invitee {
  id         String        @id @default(uuid()) @db.Uuid
  phone      String
  name       String
  email      String
  giftListId String        @db.Uuid
  giftList   GiftList      @relation(fields: [giftListId], references: [id])
  status     InviteeStatus
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum InviteeStatus {
  ACCEPTED
  REJECTED
}

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gifts       Gift[]
}

model Charge {
  id              String    @id @default(uuid()) @db.Uuid
  localId         String
  txId            String
  giftId          String    @db.Uuid
  gift            Gift      @relation(fields: [giftId], references: [id], onDelete: SetNull)
  payerId         String    @db.Uuid
  payer           User      @relation(fields: [payerId], references: [id])
  value           Float
  paymentMethod   String
  pixKey          String
  pixCopyAndPaste String
  qrCode          String
  generatedAt     DateTime
  expirationDate  DateTime
  paymentDate     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Contribution {
  id        String   @id @default(uuid()) @db.Uuid
  value     Float
  message   String?
  giftId    String   @db.Uuid
  userId    String   @db.Uuid
  gift      Gift     @relation(fields: [giftId], references: [id], onDelete: SetNull)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payment   Payment?
}

model Payment {
  id             String        @id @default(uuid()) @db.Uuid
  status         PaymentStatus
  paymentMethod  String
  pixKey         String
  paymentDate    DateTime?
  contributionId String        @unique @db.Uuid
  contribution   Contribution  @relation(fields: [contributionId], references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
}
